#!/usr/bin/env bash

# ARG_OPTIONAL_SINGLE([release],[],[],[])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

begins_with_short_option() {
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_release=""

print_help() {
	printf 'Usage: %s [--release <arg>]\n' "$0"
}

parse_commandline() {
	while test $# -gt 0; do
		_key="$1"
		case "$_key" in
		--release)
			test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
			_arg_release="$2"
			shift
			;;
		--release=*)
			_arg_release="${_key##--release=}"
			;;
		*)
			_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
			;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -o errexit
set -o xtrace

for row in $(jq -c '.[]' "dist/artifacts.json"); do
	name=$(echo "${row}" | jq -r '.name')
	name_without_extension=$(echo "${row}" | jq -r '.extra.Binary')
	path=$(echo "${row}" | jq -r '.path')
	name_with_architecture=$(echo "${path}" | cut -d '/' -f 2)
	tmp_path="/tmp/${name//$name_without_extension/$name_with_architecture}"

	# Move with new name, upload then delete.
	# As otherwise asset names clash.
	mv "${path}" "${tmp_path}"
	gh release upload "${_arg_release}" "${tmp_path}"
	rm "${tmp_path}"
done
# ] <-- needed because of Argbash
